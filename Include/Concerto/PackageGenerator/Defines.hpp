//
// Created by arthur on 09/12/2024.
//

#ifndef CONCERTO_PKGGENERATOR_DEFINE_HPP
#define CONCERTO_PKGGENERATOR_DEFINE_HPP

#include <string_view>
#include <vector>
#include <unordered_map>


#include <Concerto/Core/Types.hpp>

#ifdef CCT_PKGGENERATOR_BUILD
#define CCT_PKGGENERATOR_API CCT_EXPORT
#else
#define CCT_PKGGENERATOR_API CCT_IMPORT
#endif // CCT_PKGGENERATOR_BUILD

using Attributes = std::unordered_map<std::string_view /*name*/, std::string_view /*value*/>;
struct Enum
{
	struct Element
	{
		std::string_view name;
		std::string_view value;
		Attributes attributes;
	};
	std::string_view name;
	std::string_view base;
	std::vector<Element> elements;
	Attributes attributes;
};

struct Class
{
	struct Member
	{
		std::string_view name;
		std::string_view type;
		Attributes attributes;
	};
	struct Method
	{
		struct Params
		{
			std::string_view name;
			std::string_view type;
			Attributes attributes;
		};
		std::string_view base;
		std::string_view name;
		std::string_view returnValue;
		std::vector<Params> params;
		bool overrideInvoke;
		Attributes attributes;
	};

	std::string_view name;
	std::string_view base;
	bool autoGenerated = false;
	std::vector<Method> methods;
	std::vector<Member> members;
	Attributes attributes;
};

struct Namespace
{
	std::string_view name;
	std::vector<Class> classes;
	std::vector<Enum> enums;
	std::vector<Namespace> namespaces;
};

struct Include
{
	bool isPublic;
	std::string_view file;
};

struct Package
{
	std::string_view name;
	std::string_view version;
	std::string_view description;

	std::vector<Include> includes;
	std::vector<Class> classes;
	std::vector<Namespace> namepsaces;
	std::vector<Enum> enums;
};

#endif //CONCERTO_PKGGENERATOR_DEFINE_HPP